---
swagger: "2.0"
info:
  description: |
    Seen is a place where you can discover new Movies, Shows and Books
  version: 1.0.2
  title: Seen. Movies, Shows and Books
host: localhost:5000
basePath: /
tags:
- name: library
  description: A place to see what has been seen
- name: user
  description: Operations about user
schemes:
- https
- http
paths:
  /lib/{page}:
    get:
      tags:
      - library
      summary: Returns items library by popularity
      description: Returns a map of item codes
      operationId: api_lib.getLibrary
      produces:
      - application/json
      parameters:
      - name: page
        in: path
        description: Page to see
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ItemList'
      # security:
      # - api_key: []
  /suggest:
    get:
      tags:
      - library
      summary: Returns suggestions
      security:
        - basicAuth: [ ]
      description: Returns a map of item codes
      operationId: api_lib.getSuggestions
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
        "405":
          description: Invalid input
      # security:
      # - api_key: []
  /item:
    post:
      tags:
      - library
      summary: Add a new item to the store
      description: Creates an item
      operationId: api_lib.addItem
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Seen object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/Item'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Item'
        "405":
          description: Invalid input
      # security:
      # - seen_auth:
      #   - write:items
  /item/{type}/{itemId}:
    get:
      tags:
      - library
      summary: Find item by ID
      description: Returns a single item
      operationId: api_lib.getItemById
      produces:
      - application/json
      parameters:
      - name: itemId
        in: path
        description: Id of item to return
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Item'
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
    delete:
      tags:
      - library
      summary: Deletes an item
      description: Deletes a item
      operationId: api_lib.deleteItem
      security:
        - basicAuth: [ ]
      produces:
      - application/json
      parameters:
      - name: itemId
        in: path
        description: Id of the item to delete
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - seen_auth:
      #   - write:items
  /item/{type}/{itemId}/seen:
    put:
      tags:
      - library
      summary: Mark item as seen
      description: Mark a item as seen
      operationId: api_lib.updateItemSeen
      security:
        - basicAuth: [ ]
      parameters:
      - name: itemId
        in: path
        description: Id of item to update
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /item/{type}/{itemId}/like:
    put:
      tags:
      - library
      summary: Mark item with like
      description: Mark a item with like
      security:
        - basicAuth: [ ]
      operationId: api_lib.updateItemLike
      parameters:
      - name: itemId
        in: path
        description: Id of item to update
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: Create user
      operationId: api_users.createUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/Email'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Dados incorretos
  /user/password:
    post:
      tags:
        - user
      summary: Create user
      description: Create user
      operationId: api_users.givePassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Password'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Dados incorretos
  /user/login:
    get:

      tags:
      - user
      summary: Logs user into the system
      operationId: api_users.loginUser
      security:
        - basicAuth: [ ]
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      security:
        - basicAuth: [ ]
      operationId: api_users.logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/search/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: api_users.getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: api_users.updateUser
      security:
        - basicAuth: [ ]
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      security:
        - basicAuth: [ ]
      description: This can only be done by the logged in user.
      operationId: api_users.deleteUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
securityDefinitions:
  basicAuth:
    type: basic
    x-basicInfoFunc: api_users.verify_password
#   api_key:
#     type: apiKey
#     name: api_key
#     in: header
  # seen_auth:
  #   type: oauth2
  #   authorizationUrl: http://seen.swagger.io/oauth/dialog
  #   flow: implicit
  #   scopes:
  #     write:items: modify items in your account
  #     read:items: read your items
definitions:
  Type:
    type: string
    enum:
    - Book
    - Anime
    - Show
  Category:
    type: object
    properties:
      name:
        type: string
  User:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      password:
        type: string
      seens:
        type: array
        items:
          $ref: '#/definitions/IdTuple'
          description: Seen ids
      likes:
        type: array
        items:
          $ref: '#/definitions/IdTuple'
          description: Like ids
  Email:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
  Password:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      nonce:
        type: integer
  IdTuple:
    type: object
    required:
      - id
      - type
    properties:
      id:
        type: string
        example: "605128692d0accf2d480f2cf"
      type:
        $ref: '#/definitions/Type'

  Item:
    type: object
    required:
    - id
    - type
    - name
    properties:
      id:
        type: string
        example: "605128692d0accf2d480f2cf"
      name:
        type: string
        example: Titanic
      photoUrl:
        type: string
        description: Image from the Item
      category:
        type: array
        items:
          $ref: '#/definitions/Category'
      type:
        $ref: '#/definitions/Type'
      seens:
        type: integer
        format: int32
        example: 21005
        description: How many people has seen this
      likes:
        type: integer
        format: int32
        example: 2399
        description: How many people liked this
      rating:
        type: number
        format: double
        example: 4,55
        description: Rating
  ItemList:
    type: array
    items:
      $ref: '#/definitions/Item'

