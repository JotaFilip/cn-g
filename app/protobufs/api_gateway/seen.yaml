swagger: "2.0"
info:
  description: |
    Seen is a place where you can discover new Movies, Shows and Books
  version: 1.0.2
  title: Seen. Movies, Shows and Books
basePath: /
tags:
- name: library
  description: A place to see what has been seen
- name: library_spark
  description: Special request that user Spark
- name: user
  description: Operations about user
host: recommendations.sytes.net
schemes:
- https
paths:
  /lib/{page}:
    get:
      tags:
      - library
      summary: Returns items library by popularity
      description: Returns a map of item codes
      operationId: api_lib.getLibrary
      produces:
      - application/json
      parameters:
      - name: page
        in: path
        description: Page to see
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ItemList'
      # security:
      # - api_key: []
  /suggest:
    post:
      tags:
      - library
      summary: Returns suggestions
      security:
        - oAuthCheck:
          - read:suggest
      description: Returns a map of item codes
      operationId: api_lib.getSuggestions
      produces:
      - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            properties:
              tipos:
                type: array
                items:
                  $ref: '#/definitions/Type'
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
        "405":
          description: Invalid input
      # security:
      # - api_key: []
  /item:
    post:
      tags:
      - library
      summary: Add a new item to the store
      description: Creates an item
      operationId: api_lib.addItem
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - oAuthCheck:
            - write:item
      parameters:
      - in: body
        name: body
        description: Seen object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/ItemInsert'
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
      # security:
      # - seen_auth:
      #   - write:items
  /item/{type}/{itemId}:
    get:
      tags:
      - library
      summary: Find item by ID
      description: Returns a single item
      operationId: api_lib.getItemById
      produces:
      - application/json
      parameters:
      - name: itemId
        in: path
        description: Id of item to return
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Item'
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
    delete:
      tags:
      - library
      summary: Deletes an item
      description: Deletes a item
      operationId: api_lib.deleteItem
      security:
        - oAuthCheck:
            - delete:item
      produces:
      - application/json
      parameters:
      - name: itemId
        in: path
        description: Id of the item to delete
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - seen_auth:
      #   - write:items
  /item/{type}/{itemId}/seen:
    put:
      tags:
      - library
      summary: Mark item as seen
      description: Mark a item as seen
      operationId: api_lib.updateItemSeen
      security:
        - oAuthCheck:
            - write:seen
      parameters:
      - name: itemId
        in: path
        description: Id of item to update
        required: true
        type: string
      - name: type
        in: path
        description: type of item
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
    delete:
      tags:
        - library
      summary: Mark item as not seen
      description: Mark a item as not seen
      operationId: api_lib.removeItemSeen
      security:
        - oAuthCheck:
            - write:seen
      parameters:
        - name: itemId
          in: path
          description: Id of item to update
          required: true
          type: string
        - name: type
          in: path
          description: type of item
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /item/{type}/{itemId}/like:
    put:
      tags:
      - library
      summary: Mark item with like
      description: Mark item with like
      security:
        - oAuthCheck:
            - write:like
      operationId: api_lib.updateItemLike
      parameters:
      - name: itemId
        in: path
        description: Id of item to update
        required: true
        type: string
      - name: type
        in: path
        description: type of item to return
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
    delete:
      tags:
        - library
      summary: Mark a item as not liked
      description: Mark a item as not liked
      security:
        - oAuthCheck:
            - write:like
      operationId: api_lib.removeItemLike
      parameters:
        - name: itemId
          in: path
          description: Id of item to update
          required: true
          type: string
        - name: type
          in: path
          description: type of item to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /getTopTen/{type}:
    get:
      tags:
      - library
      summary: Returns Top 10
      description: Returns list of the top 10 items
      operationId: api_lib.getTopTen
      produces:
      - application/json
      parameters:
      - name: type
        in: path
        description: type of top 10
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/IdTuple'
        "405":
          description: Invalid input
      # security:
      # - api_key: []
  /mostConnected:
    get:
      tags:
      - library_spark
      summary: Returns the worker's imdb link that worked with the most (distinct) people
      description: Returns imdb link of the most connected worker
      operationId: api_spark.workerWithMoreConnections
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Movie'
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /bestDirector:
    get:
      tags:
      - library_spark
      summary: Returns the Director with best rating in at least 10 movies with 10.000+ reviews
      description: Returns the best Director and its average rating in movies
      operationId: api_spark.bestDirector
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            type: string
            example: Johnny Depp
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      # security:
      # - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create/Update user
      description: Updates user, if it doesn't exist, creates a new one
      operationId: api_users.updateUser
      consumes:
      - application/json
      security:
        - oAuthCheck:
          -  write:username
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/Username'
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      security:
        - oAuthCheck:
            - delete:username
      description: This can only be done by the logged in user.
      operationId: api_users.deleteUser
      produces:
        - application/json
      responses:
        "404":
          description: User not found
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: api_users.loginUser
#      security:
#        - oAuthCheck:
#            - openid
##            - read_login
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
#      security:
#        - oAuthCheck:
#            - write_logout
#            - read_logout
      operationId: api_users.logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
  /user/search/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: api_users.getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found


securityDefinitions:
#basicAuth:
  #type: basic
  #x-tokenInfoFunc: api_users.verify_password
#   api_key:
#     type: apiKey
#     name: api_key
#     in: header
  oAuthCheck:
    type: oauth2
    x-tokenInfoFunc: api_users.verify_token
    #x-tokenInfoUrl: https://saldanha.eu.auth0.com/userinfo
    authorizationUrl: https://saldanha.eu.auth0.com/authorize?audience=https://recommendations.sytes.net/api
    #?response_type=token&state=my-custom-state&sso=false&redirect_uri=http%3A%2F%2Flocalhost%2Fui&client_id=72wQelC6FubulYS6qlY7ZhSVkyNgoTYF
    #client_id: 72wQelC6FubulYS6qlY7ZhSVkyNgoTYF&
    #?response_type=token&state=my-custom-state&sso=false&redirect_uri=http%3A%2F%2Flocalhost%2Fui&client_id=72wQelC6FubulYS6qlY7ZhSVkyNgoTYF
    #authorizationUrl: https://saldanha.eu.auth0.com/u/login
    #authorizationUrl: https://saldanha.eu.auth0.com/oauth2/authorize?audience=api_users
#https://saldanha.eu.auth0.com/authorize?scope=openid%20name%20email%20nickname&response_type=token&state=my-custom-state&sso=false&client_id=72wQelC6FubulYS6qlY7ZhSVkyNgoTYF&redirect_uri=https%3A%2F%2Fsaldanha.eu12.webtask.io%2Fauth0-authentication-api-debugger&auth0Client=eyJuYW1lIjoiYXV0aDAuanMiLCJ2ZXJzaW9uIjoiNi44LjQifQ
    #audience: https://recommendations.sytes.net/api
#    String url = String url = "https://saldanha.eu.auth0.com/oauth2/authorize"+ "?response_type=id_token" + "&response_mode=form_post" +"&client_id=72wQelC6FubulYS6qlY7ZhSVkyNgoTYF" + "&redirect_uri=https://recommendations.sytes.net/callback" + CALLBACK_URL + "&scope=" + SCOPE;

    flow: implicit
    scopes:
      openid: Obtain id
      name: name
      email: email
      nickname: nickname
      read:suggest: read a suggestion
      write:item: write item
      delete:item: delete item
      write:seen: write seen
      write:like: write like
      write:username: write username
      delete:username: delete username

definitions:

  Type:
    type: string
    enum:
    - BOOK
    - ANIME
    - SHOW

  Category:
    type: object
    properties:
      name:
        type: string

  User:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      password:
        type: string
      seens:
        type: array
        items:
          $ref: '#/definitions/IdTuple'
          description: Seen ids
      likes:
        type: array
        items:
          $ref: '#/definitions/IdTuple'
          description: Like ids

  Username:
    type: object
    properties:
      username:
        type: string
  Password:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      nonce:
        type: integer

  UserAndPassword:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  IdTuple:
    type: object
    required:
      - id
      - type
    properties:
      id:
        type: string
        example: "605128692d0accf2d480f2cf"
      type:
        $ref: '#/definitions/Type'

  Item:
    type: object
    required:
    - id
    - type
    - name
    properties:
      id:
        type: string
        example: "605128692d0accf2d480f2cf"
      name:
        type: string
        example: Titanic
      photoUrl:
        type: string
        description: Image from the Item
      category:
        type: array
        items:
          $ref: '#/definitions/Category'
      type:
        $ref: '#/definitions/Type'
      seens:
        type: integer
        format: int32
        example: 21005
        description: How many people has seen this
      likes:
        type: integer
        format: int32
        example: 2399
        description: How many people liked this
      rating:
        type: number
        format: double
        example: 4.55
        description: Rating

  ItemInsert:
    type: object
    required:
      - type
      - name
    properties:
      name:
        type: string
        example: Titanic
      photoUrl:
        type: string
        description: Image from the Item
      category:
        type: array
        items:
          $ref: '#/definitions/Category'
      type:
        $ref: '#/definitions/Type'
      rating:
        type: number
        format: double
        example: 4.55
        description: Rating
      description:
        type: string

  ItemList:
    type: array
    items:
      $ref: '#/definitions/ItemReturn'

  ItemReturn:
    type: object
    properties:
      id:
        type: string
        example: "605128692d0accf2d480f2cf"
      name:
        type: string
        example: Titanic
      type:
        $ref: '#/definitions/Type'

  Movie:
    type: object
    properties:
      name:
        type: string
        example: Titanic
      cast:
        type: array
        items:
          type: string
          example: Johnny Depp
          description: Actor that played on this movie